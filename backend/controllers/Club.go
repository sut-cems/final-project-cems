package controllers

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"

	"final-project/cems/config"
	"final-project/cems/entity"
	"final-project/cems/services"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

type ClubMemberInfo struct {
	ID        uint      `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	ClubRole  string    `json:"club_role"`
	JoinedAt  time.Time `json:"joined_at"`
}

type EnhancedClubCategory struct {
	ID          uint           `json:"id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	ClubCount   int64          `json:"club_count"`
	Clubs       []EnhancedClub `json:"clubs"`
}

type EnhancedClub struct {
	ID            uint                `json:"id"`
	Name          string              `json:"name"`
	Description   string              `json:"description"`
	LogoImage     string              `json:"logo_image"`
	CreatedBy     uint                `json:"created_by"`
	StatusID      uint                `json:"status_id"`
	CategoryID    uint                `json:"category_id"`
	MemberCount   int64               `json:"member_count"`
	ActivityCount int64               `json:"activity_count"`
	Status        entity.ClubStatus   `json:"status"`
	Members       []entity.ClubMember `json:"members"`
	Activities    []entity.Activity   `json:"activities"`
}

type CategoryStats struct {
	TotalCategories int64 `json:"total_categories"`
	TotalClubs      int64 `json:"total_clubs"`
	TotalMembers    int64 `json:"total_members"`
	TotalActivities int64 `json:"total_activities"`
}

type CreateClubInput struct {
	Name        string `json:"Name" binding:"required"`
	Description string `json:"Description" binding:"required"`
	CategoryID  uint   `json:"CategoryID" binding:"required"`
	CreatedBy   uint   `json:"CreatedBy"`
}

type AnnouncementPayload struct {
	Title     string     `json:"title" binding:"required,min=1,max=200"`
	Content   string     `json:"content" binding:"required,min=1"`
	IsPinned  *bool      `json:"is_pinned"`
	ExpiresAt *time.Time `json:"expires_at"`
}

func slugify(s string) string {
	// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ "-"
	re := regexp.MustCompile(`[^a-zA-Z0-9‡∏Å-‡πô]+`)
	slug := re.ReplaceAllString(s, "-")
	// ‡∏•‡∏ö - ‡∏ã‡πâ‡∏≥ ‡πÜ
	slug = strings.Trim(slug, "-")
	return slug
}

func isDirEmpty(name string) (bool, error) {
	f, err := os.Open(name)
	if err != nil {
		return false, err
	}
	defer f.Close()

	_, err = f.Readdirnames(1)
	if err == io.EOF {
		return true, nil
	}
	return false, err
}

func GetCategoriesWithClubs(c *gin.Context) {
	db := config.DB()
	var categories []entity.ClubCategory
	var enhancedCategories []EnhancedClubCategory

	// Preload all related data
	if err := db.Preload("Clubs").
		Preload("Clubs.Status").
		Preload("Clubs.Members").
		Preload("Clubs.Activities").
		Find(&categories).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	var stats CategoryStats
	stats.TotalCategories = int64(len(categories))

	for _, category := range categories {
		enhancedCategory := EnhancedClubCategory{
			ID:          category.ID,
			Name:        category.Name,
			Description: category.Description,
			ClubCount:   int64(len(category.Clubs)),
			Clubs:       make([]EnhancedClub, 0),
		}

		stats.TotalClubs += int64(len(category.Clubs))

		for _, club := range category.Clubs {
			enhancedClub := EnhancedClub{
				ID:            club.ID,
				Name:          club.Name,
				Description:   club.Description,
				LogoImage:     club.LogoImage,
				CreatedBy:     club.CreatedBy,
				StatusID:      club.StatusID,
				CategoryID:    club.CategoryID,
				MemberCount:   int64(len(club.Members)),
				ActivityCount: int64(len(club.Activities)),
				Status:        club.Status,
				Members:       club.Members,
				Activities:    club.Activities,
			}

			stats.TotalMembers += int64(len(club.Members))
			stats.TotalActivities += int64(len(club.Activities))

			enhancedCategory.Clubs = append(enhancedCategory.Clubs, enhancedClub)
		}

		enhancedCategories = append(enhancedCategories, enhancedCategory)
	}

	c.JSON(http.StatusOK, gin.H{
		"message":    "Categories with clubs and statistics fetched successfully",
		"data":       enhancedCategories,
		"statistics": stats,
	})
}

func RemoveClubMember(c *gin.Context) {
	db := config.DB()
	clubID := c.Param("id")
	userIDParam := c.Param("userId")

	u, err := getUserFromJWT(c)
	if err != nil { c.JSON(401, gin.H{"error": err.Error()}); return }

	clubIDInt, err := strconv.Atoi(clubID)
	if err != nil { c.JSON(400, gin.H{"error": "club ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}); return }

	// target: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á userId = ‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
	var targetUserID uint
	if userIDParam == "" {
		targetUserID = u.ID
	} else {
		uid, err := strconv.Atoi(userIDParam)
		if err != nil { c.JSON(400, gin.H{"error": "user ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}); return }
		targetUserID = uint(uid)
	}

	var member entity.ClubMember
	if err := db.Where("club_id = ? AND user_id = ?", clubIDInt, targetUserID).First(&member).Error; err != nil {
		c.JSON(404, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ä‡∏°‡∏£‡∏°"})
		return
	}

	//‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
	//‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô: officer ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
	if u.ID != targetUserID {
		if _, err := requireOfficer(c, uint(clubIDInt)); err != nil { return }
	}

	if err := db.Delete(&member).Error; err != nil {
		c.JSON(500, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ"})
		return
	}

	action := "remove"
	if u.ID == targetUserID {
		if member.Role == "pending" {
			action = "cancel"
		} else {
			action = "leave"
		}
	}

	var club entity.Club
	if err := db.First(&club, clubIDInt).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏°‡∏£‡∏°"})
		return
	}

	if member.Role == "pending" && u.ID != targetUserID {
		var student entity.User
		if err := db.First(&student, member.UserID).Error; err == nil {
			subject := "‚ùå ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡∏°‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
			htmlBody, _ := services.RenderTemplate("reject_member.html", map[string]string{
				"ClubName": club.Name,
			})
			go services.SendEmailHTML(student.Email, subject, htmlBody)

		}
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
		"action":  action,
	})
}

func RequestJoinClub(c *gin.Context) {
	db := config.DB()
	clubID := c.Param("id")

	authHeader := c.GetHeader("Authorization")
	if authHeader == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "‡πÑ‡∏°‡πà‡∏°‡∏µ Authorization header"})
		return
	}
	tokenString := strings.TrimPrefix(authHeader, "Bearer ")
	claims, err := jwtService.ValidateToken(tokenString)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	var user entity.User
	if err := db.Where("email = ?", claims.Email).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"})
		return
	}

	clubIDInt, err := strconv.Atoi(clubID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏£‡∏´‡∏±‡∏™‡∏ä‡∏°‡∏£‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	var existing entity.ClubMember
	if err := db.Where("club_id = ? AND user_id = ?", clubIDInt, user.ID).First(&existing).Error; err == nil {
		if existing.Role == "pending" {
			c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"})
		} else {
			c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ä‡∏°‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"})
		}
		return
	}

	newMember := entity.ClubMember{
		UserID:   user.ID,
		ClubID:   uint(clubIDInt),
		Role:     "pending",
		JoinedAt: time.Now(),
	}
	if err := db.Create(&newMember).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ"})
		return
	}

	var club entity.Club
	if err := db.First(&club, clubIDInt).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏°‡∏£‡∏°"})
		return
	}

	var president entity.User
	if err := db.First(&president, club.CreatedBy).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏°‡∏£‡∏°"})
		return
	}

	subject := fmt.Sprintf("üì¨ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡∏°‡∏£‡∏° %s", club.Name)
	htmlBody, _ := services.RenderTemplate("join_club.html", map[string]string{
		"ClubName":  club.Name,
		"FirstName": user.FirstName,
		"LastName":  user.LastName,
	})
	go services.SendEmailHTML(president.Email, subject, htmlBody)

	c.JSON(http.StatusOK, gin.H{
		"message": "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡∏°‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
	})
}

func ApproveClubMember(c *gin.Context) {
	db := config.DB()
	clubID := c.Param("id")
	userID := c.Param("userId")

	clubIDInt, err1 := strconv.Atoi(clubID)
	userIDInt, err2 := strconv.Atoi(userID)
	if err1 != nil || err2 != nil {
		c.JSON(400, gin.H{"error": "invalid club or user id"})
		return
	}

	//Officer only
	if _, err := requireOfficer(c, uint(clubIDInt)); err != nil { return }

	if err := db.Model(&entity.ClubMember{}).
		Where("club_id = ? AND user_id = ?", clubIDInt, userIDInt).
		Update("role", "member").Error; err != nil {
		c.JSON(500, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ"})
		return
	}

	var club entity.Club
	if err := db.First(&club, clubIDInt).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏°‡∏£‡∏°"})
		return
	}
	// ‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
	var student entity.User
	if err := db.First(&student, userIDInt).Error; err == nil {
		subject := "üéâ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡∏°‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"
		htmlBody, _ := services.RenderTemplate("approve_member.html", map[string]string{
			"ClubName": club.Name,
		})
		go services.SendEmailHTML(student.Email, subject, htmlBody)
	}

	c.JSON(http.StatusOK, gin.H{"message": "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"})
}

func GetMembersByClubID(c *gin.Context) {
	db := config.DB()
	clubID := c.Param("id")
	clubIDInt, _ := strconv.Atoi(clubID)

	// officer only
	if _, err := requireOfficer(c, uint(clubIDInt)); err != nil { return }

	var members []ClubMemberInfo
	err := db.Table("users").
		Select("users.id, users.first_name, users.last_name, users.email, club_members.role as club_role, club_members.joined_at").
		Joins("JOIN club_members ON club_members.user_id = users.id").
		Where("club_members.club_id = ? AND club_members.deleted_at IS NULL", clubID).
		Scan(&members).Error
	if err != nil {
		c.JSON(500, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ"})
		return
	}
	c.JSON(200, gin.H{"success": true, "data": members})
}


func ChangeClubPresident(c *gin.Context) {
	db := config.DB()
	clubID := c.Param("id")

	clubIDUint64, _ := strconv.ParseUint(clubID, 10, 64)
	if _, err := requirePresident(c, uint(clubIDUint64)); err != nil {
		return // requirePresident ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö JSON ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
	}

	var req struct {
		NewPresidentID uint `json:"new_president_id"`
	}
	if err := c.ShouldBindJSON(&req); err != nil || req.NewPresidentID == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	var newMem entity.ClubMember
	if err := db.Where("club_id = ? AND user_id = ?", clubID, req.NewPresidentID).
		First(&newMem).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ä‡∏°‡∏£‡∏°‡∏ô‡∏µ‡πâ"})
		return
	}

	var token string

	if err := db.Transaction(func(tx *gorm.DB) error {
		var oldPres entity.ClubMember
		if err := tx.Where("club_id = ? AND role = ?", clubID, "president").
			First(&oldPres).Error; err != nil {
			return fmt.Errorf("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏°‡∏£‡∏°‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°")
		}

		if oldPres.UserID != req.NewPresidentID {
			if err := tx.Model(&entity.ClubMember{}).
				Where("club_id = ? AND user_id = ?", clubID, oldPres.UserID).
				Update("role", "member").Error; err != nil {
				return fmt.Errorf("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
			}
			if err := tx.Model(&entity.User{}).
				Where("id = ?", oldPres.UserID).
				Update("role_id", 1).Error; err != nil {
				return fmt.Errorf("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
			}
		}

		if err := tx.Model(&entity.ClubMember{}).
			Where("club_id = ? AND user_id = ?", clubID, req.NewPresidentID).
			Update("role", "president").Error; err != nil {
			return fmt.Errorf("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
		}
		if err := tx.Model(&entity.User{}).
			Where("id = ?", req.NewPresidentID).
			Update("role_id", 2).Error; err != nil {
			return fmt.Errorf("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
		}

		if err := tx.Model(&entity.Club{}).
			Where("id = ?", clubID).
			Update("created_by", req.NewPresidentID).Error; err != nil {
			return fmt.Errorf("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏°‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
		}

		var newPresident entity.User
		if err := tx.First(&newPresident, req.NewPresidentID).Error; err != nil {
			return fmt.Errorf("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà")
		}
		tk, err := jwtService.GenerateToken(newPresident.Email)
		if err != nil {
			return fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ")
		}
		token = tk

		return nil
	}); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	var club entity.Club
	if err := db.First(&club, clubID).Error; err == nil {
		var newPresident entity.User
		if err := db.First(&newPresident, req.NewPresidentID).Error; err == nil {
			if htmlBody, _ := services.RenderTemplate("new_president.html", map[string]string{
				"ClubName": club.Name,
			}); htmlBody != "" {
				go services.SendEmailHTML(newPresident.Email, "üì¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏°‡∏£‡∏°", htmlBody)
			}
		}
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏°‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
		"token":   token,
	})
}

func CreateClub(c *gin.Context) {
	name := strings.TrimSpace(c.PostForm("Name"))
	description := strings.TrimSpace(c.PostForm("Description"))
	categoryIDStr := c.PostForm("CategoryID")
	createdByStr := c.PostForm("CreatedBy")

	//Validate ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏°‡∏£‡∏°
	if name == "" || len(name) < 3 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏°‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"})
		return
	}

	//Validate ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
	if description == "" || len(description) < 10 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ä‡∏°‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"})
		return
	}

	//Validate category
	categoryID, err := strconv.ParseUint(categoryIDStr, 10, 32)
	if err != nil || categoryID == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "CategoryID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	//Validate CreatedBy
	createdBy, err := strconv.ParseUint(createdByStr, 10, 32)
	if err != nil || createdBy == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "CreatedBy ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	//Validate ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
	file, err := c.FormFile("Image")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ä‡∏°‡∏£‡∏° (Image) ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢"})
		return
	}
	if file.Size > 5*1024*1024 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB"})
		return
	}

	//‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status pending
	var pendingStatus entity.ClubStatus
	if err := config.DB().Where("name = ?", "pending").First(&pendingStatus).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending"})
		return
	}

	//‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
	uploadPath := fmt.Sprintf("images/clubs/%s/%s", slugify(name), file.Filename)
	if err := c.SaveUploadedFile(file, uploadPath); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
		return
	}

	club := entity.Club{
		Name:        name,
		Description: description,
		CategoryID:  uint(categoryID),
		CreatedBy:   uint(createdBy),
		StatusID:    pendingStatus.ID,
		LogoImage:   "/" + uploadPath,
	}
	if err := config.DB().Create(&club).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏°‡∏£‡∏°‡πÑ‡∏î‡πâ"})
		return
	}

	member := entity.ClubMember{
		UserID: uint(createdBy),
		ClubID: club.ID,
		Role:   "president",
	}
	if err := config.DB().Create(&member).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô‡∏ä‡∏°‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{
		"message": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏°‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
		"club":    club,
	})
}

func ApproveClub(c *gin.Context) {
	id := c.Param("id")

	var approvedStatus entity.ClubStatus
	if err := config.DB().Where("name = ?", "approved").First(&approvedStatus).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ approved"})
		return
	}

	var club entity.Club
	if err := config.DB().Where("id = ?", id).First(&club).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏°‡∏£‡∏°"})
		return
	}

	if err := config.DB().Model(&club).
		Update("status_id", approvedStatus.ID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ä‡∏°‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
		return
	}

	var creator entity.User
	if err := config.DB().First(&creator, club.CreatedBy).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏°‡∏£‡∏°"})
		return
	}

	// ‡∏ñ‡πâ‡∏≤ role ‡πÄ‡∏õ‡πá‡∏ô student (1) ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô club_admin (2)
	if creator.RoleID == 1 {
		if err := config.DB().Model(&entity.User{}).Where("id = ?", creator.ID).Update("role_id", 2).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
			return
		}
	}

	subject := "‚úÖ ‡∏ä‡∏°‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"
	htmlBody, err := services.RenderTemplate("approve_club.html", map[string]string{
		"ClubName": club.Name,
	})
	if err != nil {
		fmt.Println("‚ùå Error rendering email template:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ"})
		return
	}

	go services.SendEmailHTML(creator.Email, subject, htmlBody)

	c.JSON(http.StatusOK, gin.H{"message": "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ä‡∏°‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"})
}

func RejectClub(c *gin.Context) {
	id := c.Param("id")

	var club entity.Club
	if err := config.DB().First(&club, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏°‡∏£‡∏°"})
		return
	}

	var suspendedStatus entity.ClubStatus
	if err := config.DB().Where("name = ?", "suspended").First(&suspendedStatus).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ suspended"})
		return
	}

	if err := config.DB().Model(&club).Update("status_id", suspendedStatus.ID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ä‡∏°‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
		return
	}

	var creator entity.User
	if err := config.DB().First(&creator, club.CreatedBy).Error; err == nil {
		subject := "‚ùå ‡∏ä‡∏°‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
		htmlBody, _ := services.RenderTemplate("reject_club.html", map[string]string{
			"ClubName": club.Name,
		})
		go services.SendEmailHTML(creator.Email, subject, htmlBody)
	}

	c.JSON(http.StatusOK, gin.H{"message": "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ä‡∏°‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "club_id": club.ID})
}

func UpdateClub(c *gin.Context) {
	id := c.Param("id")

	var club entity.Club
	if err := config.DB().Where("id = ?", id).First(&club).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏°‡∏£‡∏°"})
		return
	}

	// ‡∏£‡∏±‡∏ö json_data
	jsonData := c.PostForm("json_data")
	var input struct {
		Name        string `json:"name"`
		Description string `json:"description"`
		CategoryID  uint   `json:"category_id"`
		StatusID    uint   `json:"status_id"`
	}
	if err := json.Unmarshal([]byte(jsonData), &input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• json_data ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	// ‡∏´‡∏≤ category name (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö path)
	var category entity.ClubCategory
	if err := config.DB().Where("id = ?", input.CategoryID).First(&category).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"})
		return
	}

	// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
	file, err := c.FormFile("logo")
	if err == nil {
		dir := fmt.Sprintf("images/clubs/%s", strings.ToLower(club.Name))
		if err := os.MkdirAll(dir, os.ModePerm); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏î‡πâ"})
			return
		}

		filename := "logo.jpg"
		path := filepath.Join(dir, filename)

		if err := c.SaveUploadedFile(file, path); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"})
			return
		}

		club.LogoImage = strings.TrimPrefix(filepath.ToSlash(path), "/")

	}

	// ‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏° vs ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
	oldName := club.Name
	newName := input.Name

	if oldName != newName {
		oldDir := fmt.Sprintf("images/clubs/%s", strings.ToLower(oldName))
		newDir := fmt.Sprintf("images/clubs/%s", strings.ToLower(newName))

		// ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
		oldLogoPath := filepath.Join(oldDir, "logo.jpg")
		newLogoPath := filepath.Join(newDir, "logo.jpg")

		if _, err := os.Stat(oldLogoPath); err == nil {
			if err := os.MkdirAll(newDir, os.ModePerm); err == nil {
				if err := os.Rename(oldLogoPath, newLogoPath); err == nil {
					club.LogoImage = strings.TrimPrefix(filepath.ToSlash(newLogoPath), "/")
				}
			}
		}

		// ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå
		if isEmpty, _ := isDirEmpty(oldDir); isEmpty {
			os.Remove(oldDir)
		}
	}

	/// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏Å‡∏±‡∏ô association ‡∏°‡∏≤‡∏ó‡∏±‡∏ö)
	updates := map[string]interface{}{
		"name":        input.Name,
		"description": input.Description,
		"category_id": input.CategoryID,
		"status_id":   input.StatusID,
	}

	// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ ‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡∏Ñ‡πà‡∏≤ club.LogoImage ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡∏Å‡πá‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
	if club.LogoImage != "" {
		updates["logo_image"] = club.LogoImage
	}

	if err := config.DB().Model(&club).Updates(updates).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"})
		return
	}

	// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• club ‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏° preload Category ‡πÅ‡∏•‡∏∞ Status
	if err := config.DB().
		Preload("Category").
		Preload("Status").
		First(&club, club.ID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏°‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "club": club})
}


